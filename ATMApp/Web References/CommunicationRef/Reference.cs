//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18051.
// 
#pragma warning disable 1591

namespace ATMApp.CommunicationRef {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CommunicationServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CommunicationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertCreditCardDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCustomerAndBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyAccountDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransactionBetweenDatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportCustomerDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchCardDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCustomerAnswerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBankCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePINDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBankFormOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeductAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBankWithBranchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountNumberForBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepositTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBankListOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDepositTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDepositTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MonthlyMaintainanceChargesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CommunicationService() {
            this.Url = global::ATMApp.Properties.Settings.Default.ATMApp_CommunicationRef_CommunicationService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertCreditCardDetailsCompletedEventHandler InsertCreditCardDetailsCompleted;
        
        /// <remarks/>
        public event InsertCustomerAndBankCompletedEventHandler InsertCustomerAndBankCompleted;
        
        /// <remarks/>
        public event GetMyAccountDetailsCompletedEventHandler GetMyAccountDetailsCompleted;
        
        /// <remarks/>
        public event TransactionBetweenDatesCompletedEventHandler TransactionBetweenDatesCompleted;
        
        /// <remarks/>
        public event ImportCustomerDetailsCompletedEventHandler ImportCustomerDetailsCompleted;
        
        /// <remarks/>
        public event SearchCardDetailsCompletedEventHandler SearchCardDetailsCompleted;
        
        /// <remarks/>
        public event InsertCustomerAnswerCompletedEventHandler InsertCustomerAnswerCompleted;
        
        /// <remarks/>
        public event GetBankCreditCompletedEventHandler GetBankCreditCompleted;
        
        /// <remarks/>
        public event UpdatePINDetailsCompletedEventHandler UpdatePINDetailsCompleted;
        
        /// <remarks/>
        public event GetUserCredentialCompletedEventHandler GetUserCredentialCompleted;
        
        /// <remarks/>
        public event GetBankFormCompletedEventHandler GetBankFormCompleted;
        
        /// <remarks/>
        public event DeductAmountCompletedEventHandler DeductAmountCompleted;
        
        /// <remarks/>
        public event LockCardCompletedEventHandler LockCardCompleted;
        
        /// <remarks/>
        public event GetBankWithBranchCompletedEventHandler GetBankWithBranchCompleted;
        
        /// <remarks/>
        public event GetAccountNumberForBankCompletedEventHandler GetAccountNumberForBankCompleted;
        
        /// <remarks/>
        public event DepositTransactionCompletedEventHandler DepositTransactionCompleted;
        
        /// <remarks/>
        public event GetBankListCompletedEventHandler GetBankListCompleted;
        
        /// <remarks/>
        public event InsertDepositTransactionCompletedEventHandler InsertDepositTransactionCompleted;
        
        /// <remarks/>
        public event InsertDepositTransactionsCompletedEventHandler InsertDepositTransactionsCompleted;
        
        /// <remarks/>
        public event MonthlyMaintainanceChargesCompletedEventHandler MonthlyMaintainanceChargesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCreditCardDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertCreditCardDetails(string customerID, string BankID, string creditID, string cdetails, System.DateTime expdate, int validity, int cvv, System.DateTime RegDate, bool valid, bool locked, string DMFlag, string CreditCardPath, out int ReturnCustomerId, out string EmailId) {
            object[] results = this.Invoke("InsertCreditCardDetails", new object[] {
                        customerID,
                        BankID,
                        creditID,
                        cdetails,
                        expdate,
                        validity,
                        cvv,
                        RegDate,
                        valid,
                        locked,
                        DMFlag,
                        CreditCardPath});
            ReturnCustomerId = ((int)(results[1]));
            EmailId = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertCreditCardDetailsAsync(string customerID, string BankID, string creditID, string cdetails, System.DateTime expdate, int validity, int cvv, System.DateTime RegDate, bool valid, bool locked, string DMFlag, string CreditCardPath) {
            this.InsertCreditCardDetailsAsync(customerID, BankID, creditID, cdetails, expdate, validity, cvv, RegDate, valid, locked, DMFlag, CreditCardPath, null);
        }
        
        /// <remarks/>
        public void InsertCreditCardDetailsAsync(string customerID, string BankID, string creditID, string cdetails, System.DateTime expdate, int validity, int cvv, System.DateTime RegDate, bool valid, bool locked, string DMFlag, string CreditCardPath, object userState) {
            if ((this.InsertCreditCardDetailsOperationCompleted == null)) {
                this.InsertCreditCardDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCreditCardDetailsOperationCompleted);
            }
            this.InvokeAsync("InsertCreditCardDetails", new object[] {
                        customerID,
                        BankID,
                        creditID,
                        cdetails,
                        expdate,
                        validity,
                        cvv,
                        RegDate,
                        valid,
                        locked,
                        DMFlag,
                        CreditCardPath}, this.InsertCreditCardDetailsOperationCompleted, userState);
        }
        
        private void OnInsertCreditCardDetailsOperationCompleted(object arg) {
            if ((this.InsertCreditCardDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCreditCardDetailsCompleted(this, new InsertCreditCardDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCustomerAndBank", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertCustomerAndBank(
                    string customername, 
                    string add1, 
                    string add2, 
                    string add3, 
                    string city, 
                    string states, 
                    string country, 
                    string emailid, 
                    string sex, 
                    string contact, 
                    string othercontact, 
                    string BankID, 
                    string userID, 
                    string password, 
                    int oldATMpin, 
                    string transactionpassword, 
                    int AccNO, 
                    decimal totalBalance, 
                    string ReportPath, 
                    string PanCardNumber, 
                    out int ReturnID) {
            object[] results = this.Invoke("InsertCustomerAndBank", new object[] {
                        customername,
                        add1,
                        add2,
                        add3,
                        city,
                        states,
                        country,
                        emailid,
                        sex,
                        contact,
                        othercontact,
                        BankID,
                        userID,
                        password,
                        oldATMpin,
                        transactionpassword,
                        AccNO,
                        totalBalance,
                        ReportPath,
                        PanCardNumber});
            ReturnID = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertCustomerAndBankAsync(
                    string customername, 
                    string add1, 
                    string add2, 
                    string add3, 
                    string city, 
                    string states, 
                    string country, 
                    string emailid, 
                    string sex, 
                    string contact, 
                    string othercontact, 
                    string BankID, 
                    string userID, 
                    string password, 
                    int oldATMpin, 
                    string transactionpassword, 
                    int AccNO, 
                    decimal totalBalance, 
                    string ReportPath, 
                    string PanCardNumber) {
            this.InsertCustomerAndBankAsync(customername, add1, add2, add3, city, states, country, emailid, sex, contact, othercontact, BankID, userID, password, oldATMpin, transactionpassword, AccNO, totalBalance, ReportPath, PanCardNumber, null);
        }
        
        /// <remarks/>
        public void InsertCustomerAndBankAsync(
                    string customername, 
                    string add1, 
                    string add2, 
                    string add3, 
                    string city, 
                    string states, 
                    string country, 
                    string emailid, 
                    string sex, 
                    string contact, 
                    string othercontact, 
                    string BankID, 
                    string userID, 
                    string password, 
                    int oldATMpin, 
                    string transactionpassword, 
                    int AccNO, 
                    decimal totalBalance, 
                    string ReportPath, 
                    string PanCardNumber, 
                    object userState) {
            if ((this.InsertCustomerAndBankOperationCompleted == null)) {
                this.InsertCustomerAndBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCustomerAndBankOperationCompleted);
            }
            this.InvokeAsync("InsertCustomerAndBank", new object[] {
                        customername,
                        add1,
                        add2,
                        add3,
                        city,
                        states,
                        country,
                        emailid,
                        sex,
                        contact,
                        othercontact,
                        BankID,
                        userID,
                        password,
                        oldATMpin,
                        transactionpassword,
                        AccNO,
                        totalBalance,
                        ReportPath,
                        PanCardNumber}, this.InsertCustomerAndBankOperationCompleted, userState);
        }
        
        private void OnInsertCustomerAndBankOperationCompleted(object arg) {
            if ((this.InsertCustomerAndBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCustomerAndBankCompleted(this, new InsertCustomerAndBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyAccountDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetMyAccountDetails(int CustomerId, string BankId) {
            object[] results = this.Invoke("GetMyAccountDetails", new object[] {
                        CustomerId,
                        BankId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetMyAccountDetailsAsync(int CustomerId, string BankId) {
            this.GetMyAccountDetailsAsync(CustomerId, BankId, null);
        }
        
        /// <remarks/>
        public void GetMyAccountDetailsAsync(int CustomerId, string BankId, object userState) {
            if ((this.GetMyAccountDetailsOperationCompleted == null)) {
                this.GetMyAccountDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyAccountDetailsOperationCompleted);
            }
            this.InvokeAsync("GetMyAccountDetails", new object[] {
                        CustomerId,
                        BankId}, this.GetMyAccountDetailsOperationCompleted, userState);
        }
        
        private void OnGetMyAccountDetailsOperationCompleted(object arg) {
            if ((this.GetMyAccountDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyAccountDetailsCompleted(this, new GetMyAccountDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransactionBetweenDates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TransactionBetweenDates([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> startdateoftrans, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> enddateoftrans, int CustomerID, string BankID) {
            object[] results = this.Invoke("TransactionBetweenDates", new object[] {
                        startdateoftrans,
                        enddateoftrans,
                        CustomerID,
                        BankID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TransactionBetweenDatesAsync(System.Nullable<System.DateTime> startdateoftrans, System.Nullable<System.DateTime> enddateoftrans, int CustomerID, string BankID) {
            this.TransactionBetweenDatesAsync(startdateoftrans, enddateoftrans, CustomerID, BankID, null);
        }
        
        /// <remarks/>
        public void TransactionBetweenDatesAsync(System.Nullable<System.DateTime> startdateoftrans, System.Nullable<System.DateTime> enddateoftrans, int CustomerID, string BankID, object userState) {
            if ((this.TransactionBetweenDatesOperationCompleted == null)) {
                this.TransactionBetweenDatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransactionBetweenDatesOperationCompleted);
            }
            this.InvokeAsync("TransactionBetweenDates", new object[] {
                        startdateoftrans,
                        enddateoftrans,
                        CustomerID,
                        BankID}, this.TransactionBetweenDatesOperationCompleted, userState);
        }
        
        private void OnTransactionBetweenDatesOperationCompleted(object arg) {
            if ((this.TransactionBetweenDatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransactionBetweenDatesCompleted(this, new TransactionBetweenDatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportCustomerDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ImportCustomerDetails(string BankID, string userID, string password, int oldATMpin, string transactionpassword, int NewAccNO, decimal totalavailablebalance, string RegistrationPath, int OldAcctNo, out int ReturnId) {
            object[] results = this.Invoke("ImportCustomerDetails", new object[] {
                        BankID,
                        userID,
                        password,
                        oldATMpin,
                        transactionpassword,
                        NewAccNO,
                        totalavailablebalance,
                        RegistrationPath,
                        OldAcctNo});
            ReturnId = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ImportCustomerDetailsAsync(string BankID, string userID, string password, int oldATMpin, string transactionpassword, int NewAccNO, decimal totalavailablebalance, string RegistrationPath, int OldAcctNo) {
            this.ImportCustomerDetailsAsync(BankID, userID, password, oldATMpin, transactionpassword, NewAccNO, totalavailablebalance, RegistrationPath, OldAcctNo, null);
        }
        
        /// <remarks/>
        public void ImportCustomerDetailsAsync(string BankID, string userID, string password, int oldATMpin, string transactionpassword, int NewAccNO, decimal totalavailablebalance, string RegistrationPath, int OldAcctNo, object userState) {
            if ((this.ImportCustomerDetailsOperationCompleted == null)) {
                this.ImportCustomerDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportCustomerDetailsOperationCompleted);
            }
            this.InvokeAsync("ImportCustomerDetails", new object[] {
                        BankID,
                        userID,
                        password,
                        oldATMpin,
                        transactionpassword,
                        NewAccNO,
                        totalavailablebalance,
                        RegistrationPath,
                        OldAcctNo}, this.ImportCustomerDetailsOperationCompleted, userState);
        }
        
        private void OnImportCustomerDetailsOperationCompleted(object arg) {
            if ((this.ImportCustomerDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportCustomerDetailsCompleted(this, new ImportCustomerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchCardDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SearchCardDetails(string CustomerName, string CreditCardNumber, string AccountNumber, string BankID) {
            object[] results = this.Invoke("SearchCardDetails", new object[] {
                        CustomerName,
                        CreditCardNumber,
                        AccountNumber,
                        BankID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SearchCardDetailsAsync(string CustomerName, string CreditCardNumber, string AccountNumber, string BankID) {
            this.SearchCardDetailsAsync(CustomerName, CreditCardNumber, AccountNumber, BankID, null);
        }
        
        /// <remarks/>
        public void SearchCardDetailsAsync(string CustomerName, string CreditCardNumber, string AccountNumber, string BankID, object userState) {
            if ((this.SearchCardDetailsOperationCompleted == null)) {
                this.SearchCardDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCardDetailsOperationCompleted);
            }
            this.InvokeAsync("SearchCardDetails", new object[] {
                        CustomerName,
                        CreditCardNumber,
                        AccountNumber,
                        BankID}, this.SearchCardDetailsOperationCompleted, userState);
        }
        
        private void OnSearchCardDetailsOperationCompleted(object arg) {
            if ((this.SearchCardDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCardDetailsCompleted(this, new SearchCardDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCustomerAnswer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertCustomerAnswer(int CustomerId, string BankId, int QuestionId, string Answer) {
            object[] results = this.Invoke("InsertCustomerAnswer", new object[] {
                        CustomerId,
                        BankId,
                        QuestionId,
                        Answer});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertCustomerAnswerAsync(int CustomerId, string BankId, int QuestionId, string Answer) {
            this.InsertCustomerAnswerAsync(CustomerId, BankId, QuestionId, Answer, null);
        }
        
        /// <remarks/>
        public void InsertCustomerAnswerAsync(int CustomerId, string BankId, int QuestionId, string Answer, object userState) {
            if ((this.InsertCustomerAnswerOperationCompleted == null)) {
                this.InsertCustomerAnswerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCustomerAnswerOperationCompleted);
            }
            this.InvokeAsync("InsertCustomerAnswer", new object[] {
                        CustomerId,
                        BankId,
                        QuestionId,
                        Answer}, this.InsertCustomerAnswerOperationCompleted, userState);
        }
        
        private void OnInsertCustomerAnswerOperationCompleted(object arg) {
            if ((this.InsertCustomerAnswerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCustomerAnswerCompleted(this, new InsertCustomerAnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBankCredit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBankCredit(string BankId) {
            object[] results = this.Invoke("GetBankCredit", new object[] {
                        BankId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBankCreditAsync(string BankId) {
            this.GetBankCreditAsync(BankId, null);
        }
        
        /// <remarks/>
        public void GetBankCreditAsync(string BankId, object userState) {
            if ((this.GetBankCreditOperationCompleted == null)) {
                this.GetBankCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBankCreditOperationCompleted);
            }
            this.InvokeAsync("GetBankCredit", new object[] {
                        BankId}, this.GetBankCreditOperationCompleted, userState);
        }
        
        private void OnGetBankCreditOperationCompleted(object arg) {
            if ((this.GetBankCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBankCreditCompleted(this, new GetBankCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePINDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdatePINDetails(int newATMPIN, int oldATMPIN, string BankID, int customerID) {
            object[] results = this.Invoke("UpdatePINDetails", new object[] {
                        newATMPIN,
                        oldATMPIN,
                        BankID,
                        customerID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePINDetailsAsync(int newATMPIN, int oldATMPIN, string BankID, int customerID) {
            this.UpdatePINDetailsAsync(newATMPIN, oldATMPIN, BankID, customerID, null);
        }
        
        /// <remarks/>
        public void UpdatePINDetailsAsync(int newATMPIN, int oldATMPIN, string BankID, int customerID, object userState) {
            if ((this.UpdatePINDetailsOperationCompleted == null)) {
                this.UpdatePINDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePINDetailsOperationCompleted);
            }
            this.InvokeAsync("UpdatePINDetails", new object[] {
                        newATMPIN,
                        oldATMPIN,
                        BankID,
                        customerID}, this.UpdatePINDetailsOperationCompleted, userState);
        }
        
        private void OnUpdatePINDetailsOperationCompleted(object arg) {
            if ((this.UpdatePINDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePINDetailsCompleted(this, new UpdatePINDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserCredential", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUserCredential(string userId, string Password, int ATMPIN) {
            object[] results = this.Invoke("GetUserCredential", new object[] {
                        userId,
                        Password,
                        ATMPIN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCredentialAsync(string userId, string Password, int ATMPIN) {
            this.GetUserCredentialAsync(userId, Password, ATMPIN, null);
        }
        
        /// <remarks/>
        public void GetUserCredentialAsync(string userId, string Password, int ATMPIN, object userState) {
            if ((this.GetUserCredentialOperationCompleted == null)) {
                this.GetUserCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCredentialOperationCompleted);
            }
            this.InvokeAsync("GetUserCredential", new object[] {
                        userId,
                        Password,
                        ATMPIN}, this.GetUserCredentialOperationCompleted, userState);
        }
        
        private void OnGetUserCredentialOperationCompleted(object arg) {
            if ((this.GetUserCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCredentialCompleted(this, new GetUserCredentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBankForm", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBankForm(int CustomerId) {
            object[] results = this.Invoke("GetBankForm", new object[] {
                        CustomerId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBankFormAsync(int CustomerId) {
            this.GetBankFormAsync(CustomerId, null);
        }
        
        /// <remarks/>
        public void GetBankFormAsync(int CustomerId, object userState) {
            if ((this.GetBankFormOperationCompleted == null)) {
                this.GetBankFormOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBankFormOperationCompleted);
            }
            this.InvokeAsync("GetBankForm", new object[] {
                        CustomerId}, this.GetBankFormOperationCompleted, userState);
        }
        
        private void OnGetBankFormOperationCompleted(object arg) {
            if ((this.GetBankFormCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBankFormCompleted(this, new GetBankFormCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeductAmount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeductAmount(string bankid, int customerid, decimal DeductionAmount) {
            object[] results = this.Invoke("DeductAmount", new object[] {
                        bankid,
                        customerid,
                        DeductionAmount});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeductAmountAsync(string bankid, int customerid, decimal DeductionAmount) {
            this.DeductAmountAsync(bankid, customerid, DeductionAmount, null);
        }
        
        /// <remarks/>
        public void DeductAmountAsync(string bankid, int customerid, decimal DeductionAmount, object userState) {
            if ((this.DeductAmountOperationCompleted == null)) {
                this.DeductAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeductAmountOperationCompleted);
            }
            this.InvokeAsync("DeductAmount", new object[] {
                        bankid,
                        customerid,
                        DeductionAmount}, this.DeductAmountOperationCompleted, userState);
        }
        
        private void OnDeductAmountOperationCompleted(object arg) {
            if ((this.DeductAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeductAmountCompleted(this, new DeductAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LockCard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet LockCard(string userId, string Password, int ATMPIN) {
            object[] results = this.Invoke("LockCard", new object[] {
                        userId,
                        Password,
                        ATMPIN});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LockCardAsync(string userId, string Password, int ATMPIN) {
            this.LockCardAsync(userId, Password, ATMPIN, null);
        }
        
        /// <remarks/>
        public void LockCardAsync(string userId, string Password, int ATMPIN, object userState) {
            if ((this.LockCardOperationCompleted == null)) {
                this.LockCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockCardOperationCompleted);
            }
            this.InvokeAsync("LockCard", new object[] {
                        userId,
                        Password,
                        ATMPIN}, this.LockCardOperationCompleted, userState);
        }
        
        private void OnLockCardOperationCompleted(object arg) {
            if ((this.LockCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockCardCompleted(this, new LockCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBankWithBranch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBankWithBranch(string BankID, int customerID, int AtmPin) {
            object[] results = this.Invoke("GetBankWithBranch", new object[] {
                        BankID,
                        customerID,
                        AtmPin});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBankWithBranchAsync(string BankID, int customerID, int AtmPin) {
            this.GetBankWithBranchAsync(BankID, customerID, AtmPin, null);
        }
        
        /// <remarks/>
        public void GetBankWithBranchAsync(string BankID, int customerID, int AtmPin, object userState) {
            if ((this.GetBankWithBranchOperationCompleted == null)) {
                this.GetBankWithBranchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBankWithBranchOperationCompleted);
            }
            this.InvokeAsync("GetBankWithBranch", new object[] {
                        BankID,
                        customerID,
                        AtmPin}, this.GetBankWithBranchOperationCompleted, userState);
        }
        
        private void OnGetBankWithBranchOperationCompleted(object arg) {
            if ((this.GetBankWithBranchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBankWithBranchCompleted(this, new GetBankWithBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountNumberForBank", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAccountNumberForBank(string BankID, int customerID) {
            object[] results = this.Invoke("GetAccountNumberForBank", new object[] {
                        BankID,
                        customerID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountNumberForBankAsync(string BankID, int customerID) {
            this.GetAccountNumberForBankAsync(BankID, customerID, null);
        }
        
        /// <remarks/>
        public void GetAccountNumberForBankAsync(string BankID, int customerID, object userState) {
            if ((this.GetAccountNumberForBankOperationCompleted == null)) {
                this.GetAccountNumberForBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountNumberForBankOperationCompleted);
            }
            this.InvokeAsync("GetAccountNumberForBank", new object[] {
                        BankID,
                        customerID}, this.GetAccountNumberForBankOperationCompleted, userState);
        }
        
        private void OnGetAccountNumberForBankOperationCompleted(object arg) {
            if ((this.GetAccountNumberForBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountNumberForBankCompleted(this, new GetAccountNumberForBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepositTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DepositTransaction(string frombankcode, string tobankcode, string fromaccountno, string toaccountno, string benificiaryname, decimal amount, int CustomerId) {
            object[] results = this.Invoke("DepositTransaction", new object[] {
                        frombankcode,
                        tobankcode,
                        fromaccountno,
                        toaccountno,
                        benificiaryname,
                        amount,
                        CustomerId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DepositTransactionAsync(string frombankcode, string tobankcode, string fromaccountno, string toaccountno, string benificiaryname, decimal amount, int CustomerId) {
            this.DepositTransactionAsync(frombankcode, tobankcode, fromaccountno, toaccountno, benificiaryname, amount, CustomerId, null);
        }
        
        /// <remarks/>
        public void DepositTransactionAsync(string frombankcode, string tobankcode, string fromaccountno, string toaccountno, string benificiaryname, decimal amount, int CustomerId, object userState) {
            if ((this.DepositTransactionOperationCompleted == null)) {
                this.DepositTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepositTransactionOperationCompleted);
            }
            this.InvokeAsync("DepositTransaction", new object[] {
                        frombankcode,
                        tobankcode,
                        fromaccountno,
                        toaccountno,
                        benificiaryname,
                        amount,
                        CustomerId}, this.DepositTransactionOperationCompleted, userState);
        }
        
        private void OnDepositTransactionOperationCompleted(object arg) {
            if ((this.DepositTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepositTransactionCompleted(this, new DepositTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBankList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetBankList() {
            object[] results = this.Invoke("GetBankList", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetBankListAsync() {
            this.GetBankListAsync(null);
        }
        
        /// <remarks/>
        public void GetBankListAsync(object userState) {
            if ((this.GetBankListOperationCompleted == null)) {
                this.GetBankListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBankListOperationCompleted);
            }
            this.InvokeAsync("GetBankList", new object[0], this.GetBankListOperationCompleted, userState);
        }
        
        private void OnGetBankListOperationCompleted(object arg) {
            if ((this.GetBankListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBankListCompleted(this, new GetBankListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDepositTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertDepositTransaction(int customerID, string BankID, string RefNo, decimal creditamt, string narration, string status, string ToAccountNumber, string BankIdCheck) {
            object[] results = this.Invoke("InsertDepositTransaction", new object[] {
                        customerID,
                        BankID,
                        RefNo,
                        creditamt,
                        narration,
                        status,
                        ToAccountNumber,
                        BankIdCheck});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDepositTransactionAsync(int customerID, string BankID, string RefNo, decimal creditamt, string narration, string status, string ToAccountNumber, string BankIdCheck) {
            this.InsertDepositTransactionAsync(customerID, BankID, RefNo, creditamt, narration, status, ToAccountNumber, BankIdCheck, null);
        }
        
        /// <remarks/>
        public void InsertDepositTransactionAsync(int customerID, string BankID, string RefNo, decimal creditamt, string narration, string status, string ToAccountNumber, string BankIdCheck, object userState) {
            if ((this.InsertDepositTransactionOperationCompleted == null)) {
                this.InsertDepositTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDepositTransactionOperationCompleted);
            }
            this.InvokeAsync("InsertDepositTransaction", new object[] {
                        customerID,
                        BankID,
                        RefNo,
                        creditamt,
                        narration,
                        status,
                        ToAccountNumber,
                        BankIdCheck}, this.InsertDepositTransactionOperationCompleted, userState);
        }
        
        private void OnInsertDepositTransactionOperationCompleted(object arg) {
            if ((this.InsertDepositTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDepositTransactionCompleted(this, new InsertDepositTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDepositTransactions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertDepositTransactions(int customerID, string BankID, string RefNo, decimal creditamt, string narration, string status, string ToAccountNumber) {
            object[] results = this.Invoke("InsertDepositTransactions", new object[] {
                        customerID,
                        BankID,
                        RefNo,
                        creditamt,
                        narration,
                        status,
                        ToAccountNumber});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDepositTransactionsAsync(int customerID, string BankID, string RefNo, decimal creditamt, string narration, string status, string ToAccountNumber) {
            this.InsertDepositTransactionsAsync(customerID, BankID, RefNo, creditamt, narration, status, ToAccountNumber, null);
        }
        
        /// <remarks/>
        public void InsertDepositTransactionsAsync(int customerID, string BankID, string RefNo, decimal creditamt, string narration, string status, string ToAccountNumber, object userState) {
            if ((this.InsertDepositTransactionsOperationCompleted == null)) {
                this.InsertDepositTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDepositTransactionsOperationCompleted);
            }
            this.InvokeAsync("InsertDepositTransactions", new object[] {
                        customerID,
                        BankID,
                        RefNo,
                        creditamt,
                        narration,
                        status,
                        ToAccountNumber}, this.InsertDepositTransactionsOperationCompleted, userState);
        }
        
        private void OnInsertDepositTransactionsOperationCompleted(object arg) {
            if ((this.InsertDepositTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDepositTransactionsCompleted(this, new InsertDepositTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MonthlyMaintainanceCharges", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MonthlyMaintainanceCharges(string userId, string Password, int ATMPIN) {
            object[] results = this.Invoke("MonthlyMaintainanceCharges", new object[] {
                        userId,
                        Password,
                        ATMPIN});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MonthlyMaintainanceChargesAsync(string userId, string Password, int ATMPIN) {
            this.MonthlyMaintainanceChargesAsync(userId, Password, ATMPIN, null);
        }
        
        /// <remarks/>
        public void MonthlyMaintainanceChargesAsync(string userId, string Password, int ATMPIN, object userState) {
            if ((this.MonthlyMaintainanceChargesOperationCompleted == null)) {
                this.MonthlyMaintainanceChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMonthlyMaintainanceChargesOperationCompleted);
            }
            this.InvokeAsync("MonthlyMaintainanceCharges", new object[] {
                        userId,
                        Password,
                        ATMPIN}, this.MonthlyMaintainanceChargesOperationCompleted, userState);
        }
        
        private void OnMonthlyMaintainanceChargesOperationCompleted(object arg) {
            if ((this.MonthlyMaintainanceChargesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MonthlyMaintainanceChargesCompleted(this, new MonthlyMaintainanceChargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertCreditCardDetailsCompletedEventHandler(object sender, InsertCreditCardDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCreditCardDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCreditCardDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int ReturnCustomerId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string EmailId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertCustomerAndBankCompletedEventHandler(object sender, InsertCustomerAndBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCustomerAndBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCustomerAndBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int ReturnID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMyAccountDetailsCompletedEventHandler(object sender, GetMyAccountDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyAccountDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyAccountDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TransactionBetweenDatesCompletedEventHandler(object sender, TransactionBetweenDatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransactionBetweenDatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransactionBetweenDatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ImportCustomerDetailsCompletedEventHandler(object sender, ImportCustomerDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportCustomerDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportCustomerDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int ReturnId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SearchCardDetailsCompletedEventHandler(object sender, SearchCardDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCardDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCardDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertCustomerAnswerCompletedEventHandler(object sender, InsertCustomerAnswerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCustomerAnswerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCustomerAnswerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBankCreditCompletedEventHandler(object sender, GetBankCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBankCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBankCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdatePINDetailsCompletedEventHandler(object sender, UpdatePINDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePINDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePINDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUserCredentialCompletedEventHandler(object sender, GetUserCredentialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCredentialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCredentialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBankFormCompletedEventHandler(object sender, GetBankFormCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBankFormCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBankFormCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeductAmountCompletedEventHandler(object sender, DeductAmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeductAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeductAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LockCardCompletedEventHandler(object sender, LockCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LockCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LockCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBankWithBranchCompletedEventHandler(object sender, GetBankWithBranchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBankWithBranchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBankWithBranchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAccountNumberForBankCompletedEventHandler(object sender, GetAccountNumberForBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountNumberForBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountNumberForBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DepositTransactionCompletedEventHandler(object sender, DepositTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepositTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepositTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBankListCompletedEventHandler(object sender, GetBankListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBankListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBankListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertDepositTransactionCompletedEventHandler(object sender, InsertDepositTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDepositTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDepositTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertDepositTransactionsCompletedEventHandler(object sender, InsertDepositTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDepositTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDepositTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MonthlyMaintainanceChargesCompletedEventHandler(object sender, MonthlyMaintainanceChargesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MonthlyMaintainanceChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MonthlyMaintainanceChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591